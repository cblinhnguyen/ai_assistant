# Sales Lead Processing Architecture

+------------------------+
| 1. Couchbase Bucket    |
|    `sales_lead`        |
| - Stores sales lead    |
|   documents            |
+-----------+------------+
            |
            v
+------------------------+
| 2. Couchbase Eventing  |
| - Triggered on document|
|   updates              |
| - Checks `old_data` to |
|   prevent loops        |
| - Builds payload:      |
|   - lead_id            |
|   - sales_lead         |
|   - old_data           |
+-----------+------------+
            |
            v
+------------------------+
| 3. Flask Service       |
| - Receives payload     |
| - Formats values       |
|   (currency, flags)    |
| - Generates prompt for |
|   AWS Bedrock LLM      |
+-----------+------------+
            |
            v
+------------------------+
| 4. AWS Bedrock LLM     |
| - Receives prompt      |
| - Generates:           |
|   - Executive Summary  |
|   - Recommendations    |
+-----------+------------+
            |
            v
+------------------------+
| 5. Couchbase Update    |
| - Flask merges summary |
|   & recommendations    |
| - Preserves `old_data` |
| - Prevents re-trigger  |
+------------------------+

# Optional: Additional Notes
- High-priority leads are flagged based on `lead_score >= 80`.
- Scripts can also generate random sales lead records (via Faker) and insert into Couchbase.

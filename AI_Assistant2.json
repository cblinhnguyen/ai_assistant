[
    {
        "appcode": "function OnUpdate(doc, meta) {\n    log(\"üì• Event triggered for doc ID:\", meta.id);\n\n    // üö´ Skip if no sales_lead\n    if (!doc.sales_lead) {\n        log(\"‚ö†Ô∏è Skipping, not a sales_lead doc:\", meta.id);\n        return;\n    }\n\n    log(\"‚úÖ Processing sales lead doc:\", meta.id);\n\n    // Build payload for Flask\n    var payload = {\n        lead_id: meta.id,\n        sales_lead: doc.sales_lead,\n        old_data: doc.old_data\n    };\n\n    log(\"üìù Payload to Flask:\", JSON.stringify(payload));\n\n    var response;\n    try {\n        response = curl(\"POST\", flaskPost, {\n            path: \"/generate_summary\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(payload)\n        });\n\n        log(\"üì° Raw response from Flask:\", JSON.stringify(response));\n\n        // ‚úÖ Parse safely (handle string or object)\n        var parsed;\n        try {\n            if (typeof response.body === \"string\") {\n                parsed = JSON.parse(response.body);\n            } else {\n                parsed = response.body; // already object\n            }\n        } catch (e) {\n            log(\"‚ùå Failed to parse Flask response body:\", e, response.body);\n            return;\n        }\n\n        log(\"üßæ Parsed Flask response body:\", JSON.stringify(parsed));\n\n        if (parsed.summary && parsed.recommendation) {\n            doc.summary = parsed.summary;\n            doc.recommendation = parsed.recommendation;\n\n            try {\n                sourceBucket[meta.id] = doc; // upsert back to bucket\n                log(\"‚úÖ Updated document with summary + recommendation:\", meta.id);\n            } catch (e) {\n                log(\"‚ùå Error saving document:\", e);\n            }\n        } else {\n            log(\"‚ùå Missing summary or recommendation in Flask response\");\n        }\n\n    } catch (e) {\n        log(\"‚ùå Error posting to Flask or parsing response:\", e);\n    }\n}\n\nfunction OnDelete(meta) {\n    // no-op\n}\n",
        "depcfg": {
            "buckets": [
                {
                    "alias": "sourceBucket",
                    "bucket_name": "sales_lead",
                    "scope_name": "_default",
                    "collection_name": "_default",
                    "access": "rw"
                }
            ],
            "curl": [
                {
                    "hostname": "http://localhost:5001",
                    "value": "flaskPost",
                    "auth_type": "no-auth",
                    "username": "",
                    "password": "",
                    "bearer_key": "",
                    "allow_cookies": true,
                    "validate_ssl_certificate": false
                }
            ],
            "source_bucket": "sales_lead",
            "source_scope": "_default",
            "source_collection": "_default",
            "metadata_bucket": "event_log",
            "metadata_scope": "_default",
            "metadata_collection": "_default"
        },
        "version": "evt-7.6.6-6126-ee",
        "enforce_schema": false,
        "handleruuid": 1106807018,
        "function_instance_id": "tNsdq2",
        "appname": "AI_Assistant2",
        "settings": {
            "cursor_aware": false,
            "dcp_stream_boundary": "everything",
            "deployment_status": false,
            "description": "",
            "execution_timeout": 60,
            "language_compatibility": "7.2.0",
            "log_level": "INFO",
            "n1ql_consistency": "none",
            "num_timer_partitions": 128,
            "processing_status": false,
            "timer_context_size": 1024,
            "user_prefix": "eventing",
            "worker_count": 1
        },
        "function_scope": {
            "bucket": "sales_lead",
            "scope": "_default"
        }
    }
]